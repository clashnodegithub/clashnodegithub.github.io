<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashnodegithub.github.io/news/article-73072.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>多线程详解 创建多线程</title>
        <meta name="description" content="一. 进程与线程： 1. 进程： 进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的" />
        <link rel="icon" href="/assets/website/img/clashnodegithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashNodeGithub节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnodegithub.github.io/news/article-73072.htm" />
    <meta property="og:site_name" content="ClashNodeGithub节点订阅站" />
    <meta property="og:title" content="多线程详解 创建多线程" />
    <meta property="og:image" content="https://clashnodegithub.github.io/uploads/20240611/24b125098208ae9ba48f64d7801b2a4a.webp" />
        <meta property="og:release_date" content="2025-03-13T09:22:33" />
    <meta property="og:updated_time" content="2025-03-13T09:22:33" />
        <meta property="og:description" content="一. 进程与线程： 1. 进程： 进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/bootstrap-5.0.0-beta2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/main.css" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="多线程详解 创建多线程">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-R0F58W82T1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-R0F58W82T1');
</script>    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
    <!-- ========================= preloader start ========================= -->
    <div class="preloader">
        <div class="loader">
            <div class="spinner">
                <div class="spinner-container">
                    <div class="spinner-rotator">
                        <div class="spinner-left">
                            <div class="spinner-circle"></div>
                        </div>
                        <div class="spinner-right">
                            <div class="spinner-circle"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- preloader end -->
    <!-- ========================= header start ========================= -->
    <header class="header">
        <div class="navbar-area">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-12">
                        <nav class="navbar navbar-expand-lg">
                                                            <a class="navbar-brand" href="/">Clash Node Github</a>
                                                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                                <div class="ms-auto">
                                    <ul id="nav" class="navbar-nav ms-auto">
                                                                                <li class="nav-item">
                                            <a href="/">首页</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/free-nodes/">免费节点</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/paid-subscribe/">推荐机场</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/client.htm">客户端</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/news/">新闻资讯</a>
                                        </li>
                                                                            </ul>
                                </div>
                            </div>
                            <!-- navbar collapse -->
                        </nav>
                        <!-- navbar -->
                    </div>
                </div>
                <!-- row -->
            </div>
            <!-- container -->
        </div>
        <!-- navbar area -->
    </header>
    <!-- ========================= header end ========================= -->
    <!-- ========================= hero-section start ========================= -->
    <section id="home" class="hero-section">
        <div class="hero-wrapper" style="height: 250px;">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-md-10">
                        <div class="hero-content">
                            <h1>多线程详解 创建多线程</h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- ========================= hero-section end ========================= -->
    <!-- ========================= about-section start ========================= -->
    <section id="about" class="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="__1" rel="nofollow"></a>一. 进程与线程：</h2> <h3><a id="1__2" rel="nofollow"></a>1. 进程：</h3> <p>进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。</p> <h3><a id="2__4" rel="nofollow"></a>2. 线程：</h3> <p>线程是一条执行路径，是程序执行时的最小单位，它是进程的一个执行流，<strong>是CPU调度和分派的基本单位</strong>，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。</p> <h3><a id="3__6" rel="nofollow"></a>3. 执行方式：</h3> <p>① 顺序执行：即程序从上往下一步一步的执行<br /> ② 并发执行：指两个或多个事件在同一个时间段内执行<br /> ③ 并行执行：指两个或多个事件在同一时刻同时执行</p> <h2><a id="__10" rel="nofollow"></a>二. 创建多线程的三种方式：</h2> <h3><a id="1_Thread_11" rel="nofollow"></a>1. 继承Thread类：</h3> <p>继承Thread类后要重写Thread类的run()方法，然后调用start()方法开启线程</p> <pre><code class="prism language-bash">public class TestThread1 extends Thread<span class="token punctuation">{<!-- --></span>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         EatThread eatThread<span class="token operator">=</span> new EatThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         DrinkThread drinkThread<span class="token operator">=</span> new DrinkThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         eatThread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         drinkThread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  class EatThread extends Thread<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  class DrinkThread extends Thread<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始喝酒?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束喝酒?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>此时的运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/d2d7a5ecf5e40bd9cee8da4a9dc98d96.jpg" alt="多线程详解 创建多线程"><br /> 当把主函数（即主线程）改为run()方法开启线程：</p> <pre><code class="prism language-bash">public class TestThread1 extends Thread<span class="token punctuation">{<!-- --></span>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         EatThread eatThread<span class="token operator">=</span> new EatThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         DrinkThread drinkThread<span class="token operator">=</span> new DrinkThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         eatThread.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         drinkThread.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>此时的运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/e0fcfe814893926a06c75f900470d057.jpg" alt="多线程详解 创建多线程"><br /> 造成区别的原因时：当使用start()方法开启线程时，各线程是并发执行的，当使用run()方法开启线程时，各线程是顺序执行的。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/c1299022aafd1d795354f12c4d78146f.jpg" alt="多线程详解 创建多线程"></p> <h3><a id="2_Runnable_68" rel="nofollow"></a>2. 实现Runnable接口：</h3> <p>与继承Thread类方法类似，实现Runnable接口后要重写run()方法，然后使用Thread类来包装调用start()方法开启线程</p> <pre><code class="prism language-bash">public class TestThread2 implements Runnable<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         TestThread2 t1<span class="token operator">=</span> new TestThread2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread thread<span class="token operator">=</span> new Thread<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  //对同一对象进行多线程从操作         thread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/efb9a4ce31cb69c1b2ef9e078b768167.jpg" alt="多线程详解 创建多线程"></p> <pre><code class="prism language-handlebars"><span class="token variable">注意：</span><span class="token variable">new</span><span class="token variable">Thread</span><span class="token punctuation">(</span><span class="token variable">t1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">和</span><span class="token variable">Thread</span><span class="token variable">thread</span><span class="token punctuation">=</span><span class="token variable">new</span><span class="token variable">Thread</span><span class="token punctuation">(</span><span class="token variable">t1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">thread</span><span class="token punctuation">.</span><span class="token variable">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">这两种写法效果是一样的</span><span class="token variable">第一种方法继承Thread类，Thread类也实现了Runnable接口</span><span class="token variable">第二种方法实现Runnable接口，类似创建一个代理工具类</span><span class="token variable">推荐使用实现Runnable接口的方法实现多线程，可以避免Java单线程的限制</span><span class="token variable">线程开启不一定立即执行，由CPU调度执行</span></code></pre> <h3><a id="3_Callable_110" rel="nofollow"></a>3. 实现Callable接口：</h3> <p>① 实现Callable接口，需要返回值类型<br /> ② 重写call()方法，需要抛出异常<br /> ③ 创建目标对象 : TestThread3 testThread3 = new TestThread3()<br /> ④ 创建执行服务 : ExecutorService ser = Executors.newFixedThreadPool(2)<br /> ⑤ 提交执行 : Future r1 = ser.submit(testThread3)<br /> ⑥ 获取结果 : boolean rst1 = r1.get();<br /> ⑦ 关闭服务 : ser.shutdownNow();</p> <pre><code class="prism language-bash">public class TestThread3 implements Callable<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span>  //①实现Callable接口，需要返回值类型     private String name<span class="token punctuation">;</span>      public TestThread3<span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         this.name<span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>     @Override     public Boolean call<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{<!-- --></span>  //②重写call<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，需要抛出异常         if<span class="token punctuation">(</span>name.equals<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">))</span><span class="token punctuation">{<!-- --></span>             System.out.println<span class="token punctuation">(</span><span class="token string">"欢迎"</span>+name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws ExecutionException, InterruptedException<span class="token punctuation">{<!-- --></span>         //③创建目标对象         TestThread3 t1<span class="token operator">=</span> new TestThread3<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         TestThread3 t2<span class="token operator">=</span> new TestThread3<span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          //④创建执行服务         ExecutorService ser<span class="token operator">=</span> Executors.newFixedThreadPool<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑤提交执行         Future<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> r1<span class="token operator">=</span> ser.submit<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>         Future<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> r2<span class="token operator">=</span> ser.submit<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑥获取结果         boolean rst1<span class="token operator">=</span> r1.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         boolean rst2<span class="token operator">=</span> r2.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System.out.println<span class="token punctuation">(</span>rst1<span class="token punctuation">)</span><span class="token punctuation">;</span>         System.out.println<span class="token punctuation">(</span>rst2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑦关闭服务         ser.shutdownNow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>运行结果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/747425e673d4f262be469697d474a08a.jpg" alt="多线程详解 创建多线程"></p> <h2><a id="__160" rel="nofollow"></a>三. 多线程实例——龟兔赛跑</h2> <pre><code class="prism language-bash">public class Race implements Runnable<span class="token punctuation">{<!-- --></span>     private static String winner<span class="token punctuation">;</span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span> 1<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> 100<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             // 模拟兔子休息             if<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"兔子"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> i%10<span class="token operator">==</span>0<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 try<span class="token punctuation">{<!-- --></span>                     Thread.sleep<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>              boolean flag<span class="token operator">=</span> isGameOver<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>             // 如果比赛结束，终止程序<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>             // Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>获取当前线程             // Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>获取当前线程名字             System.out.print<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"--&gt;跑了"</span>+i+<span class="token string">"步"</span>+<span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             if<span class="token punctuation">(</span>i%5<span class="token operator">==</span>0<span class="token punctuation">)</span>                 System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>     // 判断是否有胜利者     public boolean isGameOver<span class="token punctuation">(</span>int step<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>winner<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">&gt;=</span>100<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 winner<span class="token operator">=</span> Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 System.out.println<span class="token punctuation">(</span><span class="token string">"winner is "</span>+winner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         Race race<span class="token operator">=</span> new Race<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>race,<span class="token string">"兔子"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>race,<span class="token string">"乌龟"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>结果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/b3c242e1a23467509c5b436382f0b95e.jpg" alt="多线程详解 创建多线程"><br /> 参考:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/vbirdbest/article/details/81282163"  rel="nofollow">https://blog.csdn.net/vbirdbest/article/details/81282163</a>.</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-72412.htm">解决go-micro与其它gRPC框架之间的通信问题</a></p>
                                        <p>下一个：<a href="/news/article-73073.htm">猫猫为什么不能打头（为什么说猫不能打）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-18-free-clash-subscribe.htm" title="「1月18日」最高速度20.3M/S，2025年Shadowrocket/SSR/V2ray/Clash每天更新免费节点订阅链接">「1月18日」最高速度20.3M/S，2025年Shadowrocket/SSR/V2ray/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-56525.htm" title="狗狗领养协议一般是怎么规定的呢（狗狗领养手续）">狗狗领养协议一般是怎么规定的呢（狗狗领养手续）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-22-linux-clash-github.htm" title="「2月22日」最高速度18M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接">「2月22日」最高速度18M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-44072.htm" title="宠物猫打疫苗可以自己打吗视频（给猫打疫苗自己能打吗）">宠物猫打疫苗可以自己打吗视频（给猫打疫苗自己能打吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-30-clash-node-daily-updates.htm" title="「1月30日」最高速度20.6M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接">「1月30日」最高速度20.6M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-13-clash-windows.htm" title="「2月13日」最高速度19.8M/S，2025年Shadowrocket/SSR/V2ray/Clash每天更新免费节点订阅链接">「2月13日」最高速度19.8M/S，2025年Shadowrocket/SSR/V2ray/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-9-free-shadowrocket-node.htm" title="「3月9日」最高速度21.3M/S，2025年SSR/Shadowrocket/V2ray/Clash每天更新免费节点订阅链接">「3月9日」最高速度21.3M/S，2025年SSR/Shadowrocket/V2ray/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-65331.htm" title="国内宠物粮生产厂家排名前十（国内宠物粮食十大厂家）">国内宠物粮生产厂家排名前十（国内宠物粮食十大厂家）</a></li>
                        <li class="py-2"><a href="/news/article-37163.htm" title="鱼竿十大品牌排行榜前十名有哪些牌子(鱼竿十大品牌排行榜前十名有哪些图片)">鱼竿十大品牌排行榜前十名有哪些牌子(鱼竿十大品牌排行榜前十名有哪些图片)</a></li>
                        <li class="py-2"><a href="/news/article-53224.htm" title="宠物猫疫苗一般多少钱一针啊视频（宠物猫疫苗接种）">宠物猫疫苗一般多少钱一针啊视频（宠物猫疫苗接种）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">45</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- ========================= about-section end ========================= -->
        <!-- ========================= footer start ========================= -->
    <footer class="footer">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>
                    ClashNodeGithub节点订阅站 版权所有 Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer end ========================= -->
    <!-- ========================= scroll-top ========================= -->
    <a href="#" class="scroll-top btn-hover">
        <i class="lni lni-chevron-up"></i>
    </a>
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/clashnodegithub/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/bootstrap-5.0.0-beta2.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/wow.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/polyfill.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>