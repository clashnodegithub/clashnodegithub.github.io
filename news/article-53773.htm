<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashnodegithub.github.io/news/article-53773.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>NET Core 操作达梦数据库DM8的两种方式</title>
        <meta name="description" content="某个项目需要实现基础软件全部国产化，其中操作系统指定银河麒麟，数据库使用达梦V8，CPU平台的范围包括x64、龙芯、飞腾、鲲鹏等。考虑到这些基础产品对.NET的支持，最终选择了.NET Core 3." />
        <link rel="icon" href="/assets/website/img/clashnodegithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashNodeGithub节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnodegithub.github.io/news/article-53773.htm" />
    <meta property="og:site_name" content="ClashNodeGithub节点订阅站" />
    <meta property="og:title" content="NET Core 操作达梦数据库DM8的两种方式" />
    <meta property="og:image" content="https://clashnodegithub.github.io/uploads/20240611/51dede7a735f0274754e445ec7ba5745.webp" />
        <meta property="og:release_date" content="2025-02-09T10:05:45" />
    <meta property="og:updated_time" content="2025-02-09T10:05:45" />
        <meta property="og:description" content="某个项目需要实现基础软件全部国产化，其中操作系统指定银河麒麟，数据库使用达梦V8，CPU平台的范围包括x64、龙芯、飞腾、鲲鹏等。考虑到这些基础产品对.NET的支持，最终选择了.NET Core 3." />
        
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/bootstrap-5.0.0-beta2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/clashnodegithub/main.css" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="NET Core 操作达梦数据库DM8的两种方式">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-R0F58W82T1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-R0F58W82T1');
</script>    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
    <!-- ========================= preloader start ========================= -->
    <div class="preloader">
        <div class="loader">
            <div class="spinner">
                <div class="spinner-container">
                    <div class="spinner-rotator">
                        <div class="spinner-left">
                            <div class="spinner-circle"></div>
                        </div>
                        <div class="spinner-right">
                            <div class="spinner-circle"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- preloader end -->
    <!-- ========================= header start ========================= -->
    <header class="header">
        <div class="navbar-area">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-12">
                        <nav class="navbar navbar-expand-lg">
                                                            <a class="navbar-brand" href="/">Clash Node Github</a>
                                                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                                <div class="ms-auto">
                                    <ul id="nav" class="navbar-nav ms-auto">
                                                                                <li class="nav-item">
                                            <a href="/">首页</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/free-nodes/">免费节点</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/paid-subscribe/">推荐机场</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/client.htm">客户端</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/news/">新闻资讯</a>
                                        </li>
                                                                            </ul>
                                </div>
                            </div>
                            <!-- navbar collapse -->
                        </nav>
                        <!-- navbar -->
                    </div>
                </div>
                <!-- row -->
            </div>
            <!-- container -->
        </div>
        <!-- navbar area -->
    </header>
    <!-- ========================= header end ========================= -->
    <!-- ========================= hero-section start ========================= -->
    <section id="home" class="hero-section">
        <div class="hero-wrapper" style="height: 250px;">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-md-10">
                        <div class="hero-content">
                            <h1>NET Core 操作达梦数据库DM8的两种方式</h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- ========================= hero-section end ========================= -->
    <!-- ========================= about-section start ========================= -->
    <section id="about" class="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p>某个项目需要实现基础软件全部国产化，其中操作系统指定银河麒麟，数据库使用达梦V8，CPU平台的范围包括x64、龙芯、飞腾、鲲鹏等。考虑到这些基础产品对.NET的支持，最终选择了.NET Core 3.1。</p> </h1> <ul> <li>CPU平台：x86-64 / Arm64</li> <li>操作系统：银河麒麟 v4</li> <li>数据库：DM8</li> <li>.NET：.NET Core 3.1</li> </ul> </h1> <p>达梦自己提供了.NET操作其数据库的SDK，可以通过NuGet安装，也可以通过安装达梦数据库获取。因为NuGet上的版本不知道是谁提供的，所以这里以安装数据库获取相关SDK为例。</p> <p>在官网下载DM8的数据库安装文件：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.dameng.com/list_103.html"  target="_blank" rel="nofollow">https://www.dameng.com/list_103.html</a></p> <p>下载前需要先登录，随便注册一个帐号就好了。</p> <p>这里需要选择CPU和操作系统，按照你的开发环境选择即可，下载后按照提示安装。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ac35bdb0cbc858e8b6bfe32cfee65c7c.jpg" alt="NET Core 操作达梦数据库DM8的两种方式"></p> <p>这里以Windows10为例，安装后SDK文件的位置在：C:\dmdbms\drivers\dotNet</p> <p>这里边有EF的SDK，也有NHibernate的SDK，不过这篇文章只使用最基础的基于ADO.NET的SDK。</p> <p>这些SDK在文件夹DmProvider下边，这里还提供了一个Nuget包，可以放到自己的Nuget仓库中，方便内部安装。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6fa57cc3bf77a64c8e63d4502f19acc0.jpg" alt="NET Core 操作达梦数据库DM8的两种方式"></p> <p>可以看到，这个SDK可以支持.NET Core2.0以上的所有.NET版本。</p> </h1> <p>这里提供两种方式：传统的DbHelperSQL方式 和 Dapper 方式。</p> <h2 id="dbhelpersql方式">DbHelperSQL方式</h2> <p>这种方式早年用的比较多，现在还有很多项目在使用，通过定义一组工具方法包装对数据库的各种增删改查操作。下面给出代码：</p> <pre><code class="language-cs">    public class DmDbClient     {         private string connectionString = string.Empty;          /// &lt;summary&gt;         /// 初始化DMClient的一个新实例         /// &lt;/summary&gt;         /// &lt;param name="str"&gt;&lt;/param&gt;         public DmDbClient(string str)         {             connectionString = str;         }          #region 通用快捷方法         /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public bool Exists(string sql)         {             object obj = GetSingle(sql);              int cmdresult;             if (Equals(obj, null) || Equals(obj, DBNull.Value))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;bool&gt; ExistsAsync(string sql)         {             object obj = await GetSingleAsync(sql);              int cmdresult;             if (Equals(obj, null) || Equals(obj, DBNull.Value))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public bool Exists(string sql, params DmParameter[] paras)         {             object obj = GetSingle(sql, paras);              int cmdresult;             if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;bool&gt; ExistsAsync(string sql, params DmParameter[] paras)         {             object obj = await GetSingleAsync(sql, paras);              int cmdresult;             if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public int GetCount(string tableName, string sqlCondition)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = GetSingle(sql);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;int&gt; GetCountAsync(string tableName, string sqlCondition)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = await GetSingleAsync(sql);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public int GetCount(string tableName, string sqlCondition, DmParameter[] paras)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = GetSingle(sql, paras);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;int&gt; GetCountAsync(string tableName, string sqlCondition, DmParameter[] paras)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = await GetSingleAsync(sql, paras);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          #endregion 通用快捷方法          #region 执行简单SQL语句          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public int ExecuteSql(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     connection.Open();                     int rows = cmd.ExecuteNonQuery();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteSqlAsync(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     await connection.OpenAsync();                     int rows = await cmd.ExecuteNonQueryAsync();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数（可自定义超时时间）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="timeout"&gt;执行超时时间&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public int ExecuteSqlByTime(string sql, int timeout)         {             using (DmConnection connection = new DmConnection(this.connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     connection.Open();                     cmd.CommandTimeout = timeout;                     int rows = cmd.ExecuteNonQuery();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数（可自定义超时时间）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="timeout"&gt;执行超时时间&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteSqlByTimeAsync(string sql, int timeout)         {             using (DmConnection connection = new DmConnection(this.connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     await connection.OpenAsync();                     cmd.CommandTimeout = timeout;                     int rows = await cmd.ExecuteNonQueryAsync();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;多条SQL语句&lt;/param&gt;         public void ExecuteSqlTrans(ArrayList sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 conn.Open();                 using (DbTransaction trans = conn.BeginTransaction())                 {                     using (DmCommand cmd = new DmCommand())                     {                         cmd.Connection = conn;                         cmd.Transaction = trans;                          try                         {                             for (int n = 0; n &lt; sqlList.Count; n++)                             {                                 string sql = sqlList[n].ToString();                                  if (sql.Trim().Length &gt; 1)                                 {                                     cmd.CommandText = sql;                                     cmd.ExecuteNonQuery();                                 }                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;多条SQL语句&lt;/param&gt;         public async Task ExecuteSqlTransAsync(ArrayList sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 await conn.OpenAsync();                 using (DbTransaction trans = await conn.BeginTransactionAsync())                 {                     using (DmCommand cmd = new DmCommand())                     {                         cmd.Connection = conn;                         cmd.Transaction = trans;                          try                         {                             for (int n = 0; n &lt; sqlList.Count; n++)                             {                                 string sql = sqlList[n].ToString();                                  if (sql.Trim().Length &gt; 1)                                 {                                     cmd.CommandText = sql;                                     await cmd.ExecuteNonQueryAsync();                                 }                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条SQL查询语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public object GetSingle(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     connection.Open();                      object obj = cmd.ExecuteScalar();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条SQL查询语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public async Task&lt;object&gt; GetSingleAsync(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     await connection.OpenAsync();                      object obj = await cmd.ExecuteScalarAsync();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行查询语句，返回DbDataReader（切记要手工关闭DbDataReader）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public DbDataReader ExecuteReader(string sql)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand(sql, connection);              connection.Open();             return cmd.ExecuteReader();         }          /// &lt;summary&gt;         /// 执行查询语句，返回DbDataReader（切记要手工关闭DbDataReader）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public async Task&lt;DbDataReader&gt; ExecuteReaderAsync(string sql)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand(sql, connection);              await connection.OpenAsync();             return await cmd.ExecuteReaderAsync();         }          /// &lt;summary&gt;         /// 执行查询语句，返回DataSet         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;returns&gt;DataSet&lt;/returns&gt;         public DataSet Query(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmDataAdapter command = new DmDataAdapter(sql, connection))                 {                     DataSet ds = new DataSet();                      connection.Open();                     command.Fill(ds, "ds");                      return ds;                 }             }         }          /// &lt;summary&gt;         /// 执行查询语句，返回DataSet（可自定义超时时间）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;&lt;/param&gt;         /// &lt;param name="timeout"&gt;&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public DataSet Query(string sql, int timeout)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmDataAdapter command = new DmDataAdapter(sql, connection))                 {                     DataSet ds = new DataSet();                      connection.Open();                     command.SelectCommand.CommandTimeout = timeout;                     command.Fill(ds, "ds");                      return ds;                 }             }         }         #endregion 执行简单SQL语句          #region 执行带参数的SQL语句          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public int ExecuteSql(string sql, params DmParameter[] paras)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, connection, null, sql, paras);                     int rows = cmd.ExecuteNonQuery();                     cmd.Parameters.Clear();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteSqlAsync(string sql, params DmParameter[] paras)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     await PrepareCommandAsync(cmd, connection, null, sql, paras);                     int rows = await cmd.ExecuteNonQueryAsync();                     cmd.Parameters.Clear();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行添加SQL语句，返回记录的ID（自动产生的自增主键）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;记录的ID&lt;/returns&gt;         public int ExecuteAdd(string sql, params DmParameter[] parms)         {             sql = sql + ";Select @@IDENTITY";              using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, connection, null, sql, parms);                     int recordID = Int32.Parse(cmd.ExecuteScalar().ToString());                     cmd.Parameters.Clear();                      return recordID;                 }             }         }          /// &lt;summary&gt;         /// 执行添加SQL语句，返回记录的ID（自动产生的自增主键）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;记录的ID&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteAddAsync(string sql, params DmParameter[] parms)         {             sql = sql + ";select @@identity as newautoid";              using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     await PrepareCommandAsync(cmd, connection, null, sql, parms);                      int recordID;                     try                     {                         recordID = int.Parse((await cmd.ExecuteScalarAsync()).ToString());                     }                     catch                     {                         recordID = -1;                     }                      cmd.Parameters.Clear();                      return recordID;                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;SQL语句的哈希表（key为sql语句，value是该语句的DmParameter[]）&lt;/param&gt;         public void ExecuteSqlTrans(Hashtable sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 conn.Open();                 using (DbTransaction trans = conn.BeginTransaction())                 {                     using (DmCommand cmd = new DmCommand())                     {                         try                         {                             foreach (DictionaryEntry entry in sqlList)                             {                                 var sql = entry.Key.ToString();                                 var paras = (DmParameter[])entry.Value;                                  PrepareCommand(cmd, conn, trans, sql, paras);                                  int val = cmd.ExecuteNonQuery();                                  cmd.Parameters.Clear();                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;SQL语句的哈希表（key为sql语句，value是该语句的DmParameter[]）&lt;/param&gt;         public async Task ExecuteSqlTransAsync(Hashtable sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 await conn.OpenAsync();                 using (DbTransaction trans = conn.BeginTransaction())                 {                     using (DmCommand cmd = new DmCommand())                     {                         try                         {                             foreach (DictionaryEntry entry in sqlList)                             {                                 var sql = entry.Key.ToString();                                 var paras = (DmParameter[])entry.Value;                                  await PrepareCommandAsync(cmd, conn, trans, sql, paras);                                  int val = await cmd.ExecuteNonQueryAsync();                                  cmd.Parameters.Clear();                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条计算查询结果语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public object GetSingle(string sql, params DmParameter[] parms)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, conn, null, sql, parms);                      object obj = cmd.ExecuteScalar();                     cmd.Parameters.Clear();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条计算查询结果语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public async Task&lt;object&gt; GetSingleAsync(string sql, params DmParameter[] parms)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     await PrepareCommandAsync(cmd, conn, null, sql, parms);                      object obj = await cmd.ExecuteScalarAsync();                     cmd.Parameters.Clear();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行查询语句，返回DmDataReader (切记要手工关闭DmDataReader)         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public DbDataReader ExecuteReader(string sql, params DmParameter[] parms)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand();              PrepareCommand(cmd, connection, null, sql, parms);              DbDataReader myReader = cmd.ExecuteReader();             cmd.Parameters.Clear();              return myReader;         }          /// &lt;summary&gt;         /// 执行查询语句，返回DmDataReader (切记要手工关闭DmDataReader)         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public async Task&lt;DbDataReader&gt; ExecuteReaderAsync(string sql, params DmParameter[] parms)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand();              await PrepareCommandAsync(cmd, connection, null, sql, parms);              var myReader = await cmd.ExecuteReaderAsync();             cmd.Parameters.Clear();             return myReader;         }          /// &lt;summary&gt;         /// 执行查询语句，返回DataSet         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;param name="paras"&gt;参数数组&lt;/param&gt;         /// &lt;returns&gt;DataSet&lt;/returns&gt;         public DataSet Query(string sql, params DmParameter[] paras)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, connection, null, sql, paras);                     DataSet ds = new DataSet();                      using (DmDataAdapter da = new DmDataAdapter(cmd))                     {                         da.Fill(ds, "ds");                         cmd.Parameters.Clear();                          return ds;                     }                 }             }         }          /// &lt;summary&gt;         /// 准备SQL查询命令         /// &lt;/summary&gt;         /// &lt;param name="cmd"&gt;SQL命令对象&lt;/param&gt;         /// &lt;param name="conn"&gt;SQL连接对象&lt;/param&gt;         /// &lt;param name="trans"&gt;SQL事务对象&lt;/param&gt;         /// &lt;param name="cmdText"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         private void PrepareCommand(DmCommand cmd, DmConnection conn, DbTransaction trans, string cmdText, DmParameter[] paras)         {             if (conn.State != ConnectionState.Open)             {                 conn.Open();             }              cmd.Connection = conn;             cmd.CommandText = cmdText;              if (trans != null)             {                 cmd.Transaction = trans;             }              cmd.CommandType = CommandType.Text;             if (paras != null)             {                 foreach (DmParameter parameter in paras)                 {                     if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &amp;&amp;                         (parameter.Value == null))                     {                         parameter.Value = DBNull.Value;                     }                     cmd.Parameters.Add(parameter);                 }             }         }          /// &lt;summary&gt;         /// 准备SQL查询命令         /// &lt;/summary&gt;         /// &lt;param name="cmd"&gt;SQL命令对象&lt;/param&gt;         /// &lt;param name="conn"&gt;SQL连接对象&lt;/param&gt;         /// &lt;param name="trans"&gt;SQL事务对象&lt;/param&gt;         /// &lt;param name="cmdText"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         private async Task PrepareCommandAsync(DmCommand cmd, DmConnection conn, DbTransaction trans, string cmdText, DmParameter[] paras)         {             if (conn.State != ConnectionState.Open)             {                 await conn.OpenAsync();             }              cmd.Connection = conn;             cmd.CommandText = cmdText;              if (trans != null)             {                 cmd.Transaction = trans;             }              cmd.CommandType = CommandType.Text;             if (paras != null)             {                 foreach (DmParameter parameter in paras)                 {                     if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &amp;&amp;                         (parameter.Value == null))                     {                         parameter.Value = DBNull.Value;                     }                     cmd.Parameters.Add(parameter);                 }             }         }          #endregion 执行带参数的SQL语句     }</code></pre> <p>使用方法也很简单，传入SQL语句和参数即可。这里给出几个增删改查的例子：</p> <pre><code>    public class PersonAdoNetDAL : IPersonDAL     {         static readonly DmDbClient _client = new DmDbClient("Server=127.0.0.1; UserId=TESTDB; PWD=1234567");          public int Add(PersonModel model)         {             string sql = "insert into Person(Name,City) Values(:Name,:City)";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Name",model.Name),                 new DmParameter(":City",model.City)             };              return _client.ExecuteAdd(sql, paras);         }          public bool Update(PersonModel model)         {             string sql = "update Person set City=:City where Id=:Id";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Id",model.Id),                 new DmParameter(":City",model.City)             };              return _client.ExecuteSql(sql, paras) &gt; 0 ? true : false;         }          public bool Delete(int id)         {             string sql = "delete from Person where Id=:Id";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Id",id),             };              return _client.ExecuteSql(sql, paras) &gt; 0 ? true : false;         }          public PersonModel Get(int id)         {             string sql = "select Id,Name,City from Person where Id=:Id";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Id",id),             };              PersonModel model = null;             using (var reader = (DmDataReader)_client.ExecuteReader(sql, paras))             {                 while (reader.Read())                 {                     model = new PersonModel();                     model.Id = reader.GetInt32(0);                     model.Name = reader.GetString(1);                     model.City = reader.GetString(2);                 }             }              return model;         }          public List&lt;PersonModel&gt; GetList()         {             var list = new List&lt;PersonModel&gt;();             using (var reader = (DmDataReader)_client.ExecuteReader("select Id,Name,City from Person"))             {                 while (reader.Read())                 {                     var model = new PersonModel();                     model.Id = reader.GetInt32(0);                     model.Name = reader.GetString(1);                     model.City = reader.GetString(2);                     list.Add(model);                 }             }              return list;         }      }</code></pre> <p>需要注意达梦数据库的参数是用冒号作为前缀的。另外数据表和字段的名字建议全部使用大写字母，单词之间使用下划线分隔，也就是蛇形命名法。此时SQL语句就不用关心大小写了，怎么写都行。</p> <h2 id="dapper方式">Dapper方式</h2> <p>Dapper是一个轻量级的ORM框架，现在使用的也很广泛，可以简化代码编写。因为Dapper扩展的IDbConnection，这是ADO.NET中的东西，我们使用的DmProvider也是实现了ADO.NET相关接口，所以Dapper可以通过DmProvider操作达梦数据库。</p> <p>首先定义一个获取数据库连接对象的工厂类：</p> <pre><code class="language-cs">    public class DmConnectionFactory     {         static string sqlConnString = "Server=127.0.0.1; UserId=TESTDB; PWD=123456";         public static IDbConnection GetConn()         {             return new DmConnection(sqlConnString);         }     }</code></pre> <p>然后就可以使用它执行SQL语句了：</p> <pre><code class="language-cs">   public class PersonDapperDAL : IPersonDAL     {         public PersonDapperDAL()         {         }          public PersonModel Get(int id)         {             string sql = "select Id,Name,City from Person where Id=:Id";             return DmConnectionFactory.GetConn().QueryFirstOrDefault&lt;PersonModel&gt;(sql, new { Id = id });         }          public List&lt;PersonModel&gt; GetList()         {             string sql = "select Id,Name,City from Person";             return DmConnectionFactory.GetConn().Query&lt;PersonModel&gt;(sql).ToList();         }          public int Add(PersonModel model)         {             string sql = "insert into Person(Name,City) Values(:Name,:City);Select @@IDENTITY";             return DmConnectionFactory.GetConn().QuerySingle&lt;int&gt;(sql, model);         }          public bool Update(PersonModel model)         {             string sql = "update Person set City=:City where Id=:Id";             int result = DmConnectionFactory.GetConn().Execute(sql, model);             return result &gt; 0;         }          public bool Delete(int id)         {             string sql = "delete from Person where Id=:Id";             int result = DmConnectionFactory.GetConn().Execute(sql, new { Id = id });             return result &gt; 0;         }     }</code></pre> <p>Query、Execute这些方法都是Dapper定义的，可以看到能够少写很多代码。这里也不用打开连接、关闭连接，也不用写using，因为Dapper的这些方法中已经做了相关处理。</p> <hr/> <p>好了，以上就是本文的主要内容。如有错漏欢迎指正。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-53772.htm">Kafka 的安装及启动</a></p>
                                        <p>下一个：<a href="/news/article-54318.htm">瑞鹏宠物医院消费价格表（瑞鹏宠物医院评价）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-25331.htm" title="宠物医院优质好评500字范文 宠物医院优质好评500字范文大全">宠物医院优质好评500字范文 宠物医院优质好评500字范文大全</a></li>
                        <li class="py-2"><a href="/news/article-49544.htm" title="动物疫苗审批权 动物疫苗审批权限有哪些">动物疫苗审批权 动物疫苗审批权限有哪些</a></li>
                        <li class="py-2"><a href="/news/article-33796.htm" title="动物疫苗去哪里买便宜又好（动物疫苗证去哪里办怎么办）">动物疫苗去哪里买便宜又好（动物疫苗证去哪里办怎么办）</a></li>
                        <li class="py-2"><a href="/news/article-37644.htm" title="超级详细的webpack Plugin讲解_javascript技巧_">超级详细的webpack Plugin讲解_javascript技巧_</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-14-free-ssr-subscribe.htm" title="「11月14日」最高速度19M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接">「11月14日」最高速度19M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-19808.htm" title="国内宠物粮品牌排行前十（国内十大宠物粮食品牌）">国内宠物粮品牌排行前十（国内十大宠物粮食品牌）</a></li>
                        <li class="py-2"><a href="/news/article-46081.htm" title="东北农业大学动物医学院附属医院招聘公告（东北农业大学动物医院新地址）">东北农业大学动物医学院附属医院招聘公告（东北农业大学动物医院新地址）</a></li>
                        <li class="py-2"><a href="/news/article-22554.htm" title="宠物粮品牌排名榜最新图片（宠物粮品牌排名榜最新图片）">宠物粮品牌排名榜最新图片（宠物粮品牌排名榜最新图片）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-12-clash-windows.htm" title="「11月12日」最高速度21.7M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接">「11月12日」最高速度21.7M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-27194.htm" title="想学宠物医生应该报考什么大学呢（学宠物医生需要学历吗）">想学宠物医生应该报考什么大学呢（学宠物医生需要学历吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- ========================= about-section end ========================= -->
        <!-- ========================= footer start ========================= -->
    <footer class="footer">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>
                    ClashNodeGithub节点订阅站 版权所有 Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer end ========================= -->
    <!-- ========================= scroll-top ========================= -->
    <a href="#" class="scroll-top btn-hover">
        <i class="lni lni-chevron-up"></i>
    </a>
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/clashnodegithub/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/bootstrap-5.0.0-beta2.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/wow.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/polyfill.js"></script>
    <script src="/assets/website/js/frontend/clashnodegithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>